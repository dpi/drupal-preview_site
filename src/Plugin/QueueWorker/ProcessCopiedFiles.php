<?php

namespace Drupal\preview_site\Plugin\QueueWorker;

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\Exception\FileWriteException;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Logger\LoggerChannelInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Queue\QueueWorkerBase;
use Drupal\preview_site\Entity\PreviewSiteBuildInterface;
use Drupal\preview_site\Generate\FileHelper;
use Drupal\preview_site\Plugin\PreviewSite\Generate\TomeGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Defines a queue worker plugin for deployments.
 *
 * @QueueWorker(
 *   id = \Drupal\preview_site\Plugin\QueueWorker\ProcessCopiedFiles::PLUGIN_ID,
 *   title = @Translation("Copied files worker"),
 *   deriver = \Drupal\preview_site\Plugin\Derivative\PreviewSiteBuildQueueWorkerDeriver::class,
 * )
 */
class ProcessCopiedFiles extends QueueWorkerBase implements ContainerFactoryPluginInterface {

  public const PLUGIN_ID = 'preview_site_copied_files';

  /**
   * Entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * Logger.
   *
   * @var \Drupal\Core\Logger\LoggerChannelInterface
   */
  protected $log;

  /**
   * File system.
   *
   * @var \Drupal\Core\File\FileSystemInterface
   */
  protected $fileSystem;

  /**
   * Constructs a new ProcessCopiedFiles.
   *
   * @param array $configuration
   *   Configuration.
   * @param string $plugin_id
   *   Plugin ID.
   * @param array $plugin_definition
   *   Plugin definition.
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
   *   Entity type manager.
   * @param \Drupal\Core\Logger\LoggerChannelInterface $log
   *   A logger.
   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
   *   The file system.
   */
  public function __construct(array $configuration, string $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entityTypeManager, LoggerChannelInterface $log, FileSystemInterface $fileSystem) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->entityTypeManager = $entityTypeManager;
    $this->log = $log;
    $this->fileSystem = $fileSystem;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('entity_type.manager'),
      $container->get('logger.factory')->get('preview_site'),
      $container->get('file_system')
    );
  }

  /**
   * {@inheritdoc}
   *
   * @param array{path: string, destination: string} $item
   *   The queue item.
   */
  public function processItem($item): void {
    ['path' => $path, 'destination' => $destination] = $item;

    $build = $this->entityTypeManager->getStorage('preview_site_build')->load($this->pluginDefinition['preview_site_build_id']);
    if (!$build instanceof PreviewSiteBuildInterface) {
      $this->log->error('Build %build_id was deleted before file could be copied from %path to %destination', [
        '%path' => $path,
        '%destination' => $destination,
        '%build_id' => $this->pluginDefinition['preview_site_build_id'],
      ]);
      return;
    }

    $directory = dirname($destination);
    if (!$this->fileSystem->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
      $this->log->notice('Unable to prepare directory %directory for writing', [
        '%directory' => $directory,
      ]);
      return;
    }

    try {
      $this->fileSystem->copy($path, $destination, FileSystemInterface::CREATE_DIRECTORY);
    }
    catch (FileException $exception) {
      $this->log->error('Could not copy path %path to %destination when processing build %name: @exception', [
        '%path' => $path,
        '%destination' => $destination,
        '%name' => $build->label(),
        '@exception' => $exception->getMessage(),
      ]);
      return;
    }
    // Remove any relative slashes (./) but retain ../.
    $copied_path = preg_replace('@(?<!\.)\./@', '', $path);
    if ($build->hasPathBeenProcessed($copied_path)) {
      return;
    }
    $build->markPathAsProcessed($destination);
    $build->addArtifact(FileHelper::createFromExistingFile($destination));

    // These queue items are only generated by Preview Site, we can assume it's
    // our plugin.
    $generator = $build->getGeneratePlugin();
    assert($generator instanceof TomeGenerator);
    $static = $generator->getStatic();
    $static->setPreviewSiteBuild($build);

    foreach ($static->getAssets($path, $destination) as $path) {
      // This may recursively create more queue items.
      $static->exportPaths([$path]);
    }
  }

  /**
   * Creates a queue item.
   *
   * @param string $path
   *   The path.
   * @param string $destination
   *   The destination.
   *
   * @return array{path: string, destination: string}
   *   A queue item.
   */
  public static function createItem($path, string $destination): array {
    return [
      'path' => $path,
      'destination' => $destination,
    ];
  }

}
